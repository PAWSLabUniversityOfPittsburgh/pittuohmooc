The _source_ format for s2014 is as follows 1 rowId (running integer starting from 1) 2 student 3 course 4 exercise 5 snapshot type (can be generic, run, test or submit; generic is there only for a few initial events) 6 time (right now in millisecond-formatted unix timestamps if I recall correctly) 7 time from previous snapshot (in milliseconds) 8 compiles (true, false) 9 compilation error codes if the code does not compile (these are separated by commas)10 tests compile (false, na (= skipped), true) NEW11 test compilation error codes if the test code does not compile (these are separated by commas) NEW12 portion of unit tests pass (from 0 to 1, -1 if tests have not been run)13 test points in this snapshot (a comma separated list of values, shows the points that students get from the tests run in this snapshot)14 individual passing test cases (a comma separated lists of strings, each string represents a single test case; format ClassName.testMethodName)15 total source code lines16 total source code characters17 concepts (as a string, each concept with occurrence count, concepts separated by a comma. e.g. println:3,print:5,..)18 baseline concepts (the data that the student gets as a starter, in the above format)19 changed concepts (concept change from the baseline -TODO: should this be from previous snapshot?)20 number of changed concepts (currently counting every increase and decrease of existing concepts, e.g. adding 2 printlns and removing 1 print adds up to 3 changed concepts)Note1: The dataset has separate labels for run, test and submit -- we do not record saves currently. There's a few "generic" events stored at the start of an assignment for each student just to see when they really start to work on the assignment, and if needed, I could get information on pauses also, e.g. where the students have not done anything in a few seconds (we've worked on looking at pausing behavior and how it corresponds to the spacing effect, and have a paper submitted; can tell more about it later). Anyhow, the data format for the above dataset is as follows, each entry is separated with a semicolon.Note2: An example of the cases that testCompiles gets False while sourceCompiles is true is when student renames the class or the method that he or she is working on, if the test has not been written so that it tries to take that into account, then that definitely ends up with a fails. Note3: TestCompile=na, if the sources does not compile. In those cases that source does not compile, we don’t even try to compile the tests. There are a few cases in GENERIC where this field is equal to ’na’ just to avoid unnecessary running of tests (if there's no pause in typing)PreprocessingAfter pre-processing, this is the format 1 rowId (running integer starting from 1) 2 student 3 course 4 exercise 5 snapshot type (can be generic, run, test or submit; generic is there only for a few initial events) 6 time (right now in millisecond-formatted unix timestamps if I recall correctly) 7 time from previous snapshot (in milliseconds) 8 compiles (true, false) 9 compilation error codes if the code does not compile (these are separated by commas)10 tests compile (false, na (= skipped), true) NEW11 test compilation error codes if the test code does not compile (these are separated by commas) NEW12 portion of unit tests pass (from 0 to 1, -1 if tests have not been run)13 test points in this snapshot (a comma separated list of values, shows the points that students get from the tests run in this snapshot)14 individual passing test cases (a comma separated lists of strings, each string represents a single test case; format ClassName.testMethodName)15 total source code lines16 total source code characters17 concepts (as a string, each concept with occurrence count, concepts separated by a comma. e.g. println:3,print:5,..)18 baseline concepts (the data that the student gets as a starter, in the above format)19 changed concepts (concept change from the baseline -TODO: should this be from previous snapshot?)20 number of changed concepts (currently counting every increase and decrease of existing concepts, e.g. adding 2 printlns and removing 1 print adds up to 3 changed concepts)21 number of conceptsBehaviorsAfter adding behaviors, this is the new format 1 rowId (running integer starting from 1) 2 student 3 course 4 exercise 5 snapshot type (can be generic, run, test or submit; generic is there only for a few initial events) 6 time (right now in millisecond-formatted unix timestamps if I recall correctly) 7 time from previous snapshot (in milliseconds) 8 compiles (true, false) 9 compilation error codes if the code does not compile (these are separated by commas)10 tests compile (false, na (= skipped), true) NEW11 test compilation error codes if the test code does not compile (these are separated by commas) NEW12 portion of unit tests pass (from 0 to 1, -1 if tests have not been run)13 test points in this snapshot (a comma separated list of values, shows the points that students get from the tests run in this snapshot)14 individual passing test cases (a comma separated lists of strings, each string represents a single test case; format ClassName.testMethodName)15 total source code lines16 total source code characters17 concepts (as a string, each concept with occurrence count, concepts separated by a comma. e.g. println:3,print:5,..)18 baseline concepts (the data that the student gets as a starter, in the above format)19 changed concepts (concept change from the baseline -TODO: should this be from previous snapshot?)20 number of changed concepts (currently counting every increase and decrease of existing concepts, e.g. adding 2 printlns and removing 1 print adds up to 3 changed concepts)21 number of concepts**PSS4**22 count_building - count of "building" steps since previous submission (null submission or a normal submission)23 count_reducing - count of "reducing" steps since previous submission (null submission or a normal submission)24 count_massaging - count of "massaging" steps since previous submission (null submission or a normal submission)25 count_struggling - count of "struggling" steps since previous submission (null submission or a normal submission)26 building_sec - seconds of "building" steps since previous submission (null submission or a normal submission)27 reducing_sec - seconds of "reducing" steps since previous submission (null submission or a normal submission)28 massaging_sec - seconds of "massaging" steps since previous submission (null submission or a normal submission)29 struggling_sec - seconds of "struggling" steps since previous submission (null submission or a normal submission)**PS4**22 count_building - count of "building" steps since previous submission (null submission or a normal submission)23 count_reducing - count of "reducing" steps since previous submission (null submission or a normal submission)24 count_massaging - count of "massaging" steps since previous submission (null submission or a normal submission)25 count_struggling - count of "struggling" steps since previous submission (null submission or a normal submission)26 building_sec - seconds of "building" steps since previous submission (null submission or a normal submission)27 reducing_sec - seconds of "reducing" steps since previous submission (null submission or a normal submission)28 massaging_sec - seconds of "massaging" steps since previous submission (null submission or a normal submission)29 struggling_sec - seconds of "struggling" steps since previous submission (null submission or a normal submission)**PS12**22 count_a - count of "a" steps since previous submission (null submission or a normal submission)23 count_b - count of "b" steps since previous submission (null submission or a normal submission)24 count_c - count of "c" steps since previous submission (null submission or a normal submission)25 count_d - count of "d" steps since previous submission (null submission or a normal submission)26 count_e - count of "e" steps since previous submission (null submission or a normal submission)27 count_f - count of "f" steps since previous submission (null submission or a normal submission)28 count_g - count of "g" steps since previous submission (null submission or a normal submission)29 count_h - count of "h" steps since previous submission (null submission or a normal submission)30 count_i - count of "i" steps since previous submission (null submission or a normal submission)31 count_j - count of "j" steps since previous submission (null submission or a normal submission)32 count_k - count of "k" steps since previous submission (null submission or a normal submission)33 count_l - count of "l" steps since previous submission (null submission or a normal submission)34 a_sec - seconds of "a" steps since previous submission (null submission or a normal submission)35 b_sec - seconds of "b" steps since previous submission (null submission or a normal submission)36 c_sec - seconds of "c" steps since previous submission (null submission or a normal submission)37 d_sec - seconds of "d" steps since previous submission (null submission or a normal submission)38 e_sec - seconds of "e" steps since previous submission (null submission or a normal submission)39 f_sec - seconds of "f" steps since previous submission (null submission or a normal submission)40 g_sec - seconds of "g" steps since previous submission (null submission or a normal submission)41 h_sec - seconds of "h" steps since previous submission (null submission or a normal submission)42 i_sec - seconds of "i" steps since previous submission (null submission or a normal submission)43 j_sec - seconds of "j" steps since previous submission (null submission or a normal submission)44 k_sec - seconds of "k" steps since previous submission (null submission or a normal submission)45 l_sec - seconds of "l" steps since previous submission (null submission or a normal submission)All Submit ./data/${dataset}_allsubmit.txtOnly rows without “;GENERIC;” in them – student submissions of the codeThe order of columns are as follows:1-21: original data22-29: PSS4 columns30-37: PS4 columns38-61: PS12 columnsAdding ABCD ./data/${dataset}_allsubmitABCD.txt17 originalConcepts - original list of concepts62 originalConcepts B - changes from previous submit63 originalConcepts C - changes from previous submit including removals with _NEG suffix64 originalConcepts D - original list of concepts plus removals with _NEG suffix=                     == background-data.txt ==                     =student (space) birth_year (space) gender (space) credit_grade_csv=                     == background-data.tsv ==                     =student (tab) year-of-birth (tab) gender ((tab) credit-date (tab) grade)=                         == backgrounds-encoded.tsv ==                         =USER (tab) EDUCATION (tab) PROGRAMMING_EXPERIENCE (tab) LARGEST_PROGRAM_WRITTEN_IN_LINES(tab) PROGRAMMED_IN_HOURS (tab)	GENDER	(tab) YEAR_OF_BIRTH============================ CONCEPT FILTERING FILES =============================                  													     == ./data/fc/[DATASET]_problems/[PROBLEM]_[ABCD]_AvgT_AvgCs_FCT_input.txt ==                                                                        =The tab-separated input file for the concept filtering method. It has one row for each student who has submitted a code for the PROBLEM. The first column shows the average performance of the student across all her submissions in that problem. The performance of student in each submission is obtained from column 12, "portion of unit tests pass" column.The rest of the columns are the unique concepts across all submission of all students in that PROBELM. The value of a concept in a row shows the average number of times the concept has appeared in the student submissions in that PROBLEM.=            													       == ./data/fc/[DATASET]_problems/[PROBLEM]_[ABCD]_AvgT_AvgCs_FCT_lm.txt  ==                                                                      =The tab-separated output file for the backward linear regression concept filtering method. It has one row, the first column is always 1.0 to show that we do not distinguish between individual tests in the PROBLEM. The rest of the columns are reduced concepts for the PROBLEM.=                  													   == ./data/fc/[DATASET]_problems/[PROBLEM]_[ABCD]_AvgT_AvgCs_FCT_rfe.txt ==                                                                      =The tab-separated output file for the recursive feature elimination concept filtering method. It has one row, the first column is always 1.0 to show that we do not distinguish between individual tests in the PROBLEM. The rest of the columns are reduced concepts for the PROBLEM.*The control function for rfe method was random forest with 5-fold cv.=                          				    == ./data/fc/logAvgT_AvgCs_FCT_[DATASET].txt ==                                           =The logs generated during the concept filtering. The format of the log is:dataset   cf_method   path_to_input_file   test   testNumber*   log_msg *testNumber is always 1.0 to show that we do not distinguish between individual tests in the PROBLEM=                                    == ./data/fc/errors_FCT_[DATASET].txt ==                                    =The errors generated during concept filtering. The format of the error is:dataset   cf_method   path_to_input_file   error_msg *testNumber is always 1.0 to show that we do not distinguish between individual tests in the PROBLEM